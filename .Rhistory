a <- available.packages()
head(rownames(a), 1)
head(rownames(a), 2)
head(rownames(a), 3)
install.packages('slidify')
install.packages("slidify")
install.packages(c('ggplot2', 'devtools'))
install.packages("slidify")
source('http://bioconductor.org/biocLite.R')
biocLite()
biocLite(c('GenomicFeatures', 'AnnotationDbi'))
library(ggplot2)
search
search()
find.package('devtools')
library(devtools)
find_rtoos()
find_rtools()
library(devtools)
library(rtools)
library(devtools)
find_rtools()
install.packages('KernSmooth')
library(KernSmooth)
mean(x)
traceback()
lm(y-x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error=recover)
read.csv('nosuchfile')
options(error=NULL)
read.csv('nosuchfile')
library(datasets)
data(iris)
iris
head(iris)
iris$sepal.Length
iris[['sepal.Length'']]'
iris[['Sepal.Length'']]'
iris[['Sepal.Length']]
iris$Species
iris$Species == 'Virginica'
iris$Species == 'virginica'
iris[iris$Species == 'virginica']
iris[, iris$Species == 'virginica']
iris[iris$Species == 'virginica', ]
iris[iris$Species == 'virginica', 'Sepal.Length']
mean(iris[iris$Species == 'virginica', 'Sepal.Length'])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$cyl
factor(mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
hps <- tapply(mtcars$hp, mtcars$cyl, mean)
hps
hps[['4']]
hps[['8']] - hps[['4']]
debug(ls)
ls()
setwd("C:/Users/xyli/Heroku/coursera/rprograming/ProgrammingAssignment2")
ls
list.files()
source('cachematrix.R')
source('cachemean.R')
x <- c(1,2,3)
cachemean(x)
xvector <- makeVector(x)
xvector
xvector$get
xvector$set
xvector$get()
xvector$getmean()
xvector$setmean()
xvector$setmean(xvector$get())
xvector$getmean()
z <- 1:9
a <- makeVector(z)
a
cachemean(a)
cachemean(a)
cachemean(a)
a$get
a$get()
a$getmean()
m <- matrix(1:9, 3, 3)
m
solv(m)
solve(m)
class(m)
rbind(c(1,0,0), c(0,1,0), c(0,0,1))
m2 <- rbind(c(1,0,0), c(0,1,0), c(0,0,1))
class(m2)
solve(m2)
m3 <- m2.copy()
m3 <- copy(m2)
m3 <- m2
m3
m3[1,1] <- 2
m3
m2
solve(m2)
solve(m3)
m3
